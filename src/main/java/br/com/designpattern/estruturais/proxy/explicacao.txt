Exemplo: Implementação de um Proxy para Controle de Acesso a Dados Sensíveis usando Spring Boot

Imagine que você tem um serviço UserService em um sistema de banco digital que retorna informações de conta bancária de usuários. Como essas informações são sensíveis, você precisa de um controle rigoroso para garantir que apenas usuários autorizados possam acessá-las e que o acesso seja registrado para auditoria.

Para isso, você pode usar um Proxy para adicionar uma camada de segurança e registro de auditoria sem modificar diretamente o código do UserService.
Estrutura do Código

    Interface de Serviço (UserService)

    Define os métodos que fornecem acesso aos dados do usuário.

public interface UserService {
    UserAccount getUserAccount(Long userId);
}

Implementação Real do Serviço (UserServiceImpl)

Implementa a lógica para obter informações da conta do usuário.

@Service
public class UserServiceImpl implements UserService {
    @Override
    public UserAccount getUserAccount(Long userId) {
        // Aqui, você buscaria as informações do usuário no banco de dados.
        return new UserAccount(userId, "John Doe", "1234-5678-9000", 1500.00);
    }
}

Classe de Proxy (UserServiceProxy)

Implementa a lógica de proxy, adicionando verificações de permissão e auditoria antes de chamar o serviço real.

@Service
public class UserServiceProxy implements UserService {
    private final UserServiceImpl userService;
    private final AuditService auditService;

    public UserServiceProxy(UserServiceImpl userService, AuditService auditService) {
        this.userService = userService;
        this.auditService = auditService;
    }

    @Override
    public UserAccount getUserAccount(Long userId) {
        // Verificação de permissão
        if (!hasPermission(userId)) {
            throw new SecurityException("Acesso negado para o usuário: " + userId);
        }
        
        // Registro de auditoria
        auditService.logAccess(userId);

        // Chamada ao serviço real
        return userService.getUserAccount(userId);
    }

    private boolean hasPermission(Long userId) {
        // Lógica para verificar se o usuário tem permissão
        return true; // Exemplo simplificado
    }
}

Classe de Auditoria (AuditService)

Um serviço separado que lida com o registro de acessos.

@Service
public class AuditService {
    public void logAccess(Long userId) {
        System.out.println("Auditando acesso ao usuário: " + userId + " em " + LocalDateTime.now());
        // Aqui, registraríamos o acesso no banco de dados ou sistema de auditoria
    }
}

Configuração e Uso do Proxy

Ao invés de injetar UserServiceImpl diretamente, injetamos UserServiceProxy, que implementa a mesma interface (UserService), mas adiciona as verificações de permissão e auditoria antes de acessar o serviço real.

@RestController
@RequestMapping("/api/accounts")
public class UserController {
    private final UserService userService;

    public UserController(UserServiceProxy userService) {
        this.userService = userService;
    }

    @GetMapping("/{userId}")
    public ResponseEntity<UserAccount> getUserAccount(@PathVariable Long userId) {
        return ResponseEntity.ok(userService.getUserAccount(userId));
    }
}