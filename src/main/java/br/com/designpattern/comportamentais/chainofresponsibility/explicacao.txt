Imagine que você está atuando como Engenheiro de Software em uma empresa que trabalha com uma plataforma de e-commerce. Nesse contexto, você recebe uma demanda para implementar um sistema de validação de pedidos complexos antes de serem processados, envolvendo diversas regras de negócio. Para esse tipo de problema, o padrão Chain of Responsibility pode ser uma ótima solução.
Cenário do Mercado de Trabalho

Em um sistema de e-commerce, o processo de validação de pedidos envolve várias regras, como verificação de estoque, validação de método de pagamento, análise antifraude, e verificação de disponibilidade para entrega. Cada uma dessas validações deve ser realizada em sequência, e o pedido só deve prosseguir se todas as validações forem bem-sucedidas.

No passado, era comum ver esse tipo de validação implementada de forma monolítica, em um único serviço ou método, com diversas condicionais (if/else). Esse tipo de implementação, porém, tornava o código difícil de manter e escalar, especialmente conforme as regras de negócio mudavam.
Solução com Chain of Responsibility

O padrão Chain of Responsibility permite que você separe cada validação em um handler independente, tornando o sistema mais modular e flexível. Em Spring Boot, podemos implementar isso de forma eficiente, aproveitando o suporte para injeção de dependências e o uso de classes configuráveis.
Exemplo de Implementação

Suponha que você precise implementar os seguintes handlers de validação em uma cadeia para um pedido:

    Verificar Estoque
    Validar Pagamento
    Análise Antifraude
    Verificar Entrega

Cada um desses passos será um handler na cadeia de responsabilidades.
Passo a Passo da Implementação

    Criar uma Interface de Handler

    Primeiramente, você define uma interface comum para todos os handlers:

public interface PedidoHandler {
    boolean processar(Pedido pedido);
}

Implementar Handlers Específicos

Agora, implementamos cada handler de acordo com sua lógica de negócio.

Verificar Estoque Handler:

@Component
public class VerificarEstoqueHandler implements PedidoHandler {

    @Override
    public boolean processar(Pedido pedido) {
        // Lógica para verificar o estoque
        if (!estoqueDisponivel(pedido)) {
            return false; // Falha na verificação de estoque
        }
        return true; // Passa para o próximo handler
    }

    private boolean estoqueDisponivel(Pedido pedido) {
        // Implementação fictícia de verificação de estoque
        return true;
    }
}

Validar Pagamento Handler:

@Component
public class ValidarPagamentoHandler implements PedidoHandler {

    @Override
    public boolean processar(Pedido pedido) {
        // Lógica para validar o pagamento
        if (!pagamentoValido(pedido)) {
            return false; // Falha na verificação de pagamento
        }
        return true;
    }

    private boolean pagamentoValido(Pedido pedido) {
        // Implementação fictícia de validação de pagamento
        return true;
    }
}

O mesmo seria feito para os outros handlers, como análise antifraude e verificação de entrega.

Criar a Cadeia de Responsabilidade

Para gerenciar a ordem dos handlers, você pode configurar uma lista de handlers, que será passada ao pedido em sequência. Vamos usar injeção de dependência com Spring para compor essa lista.

@Service
public class PedidoService {

    private final List<PedidoHandler> handlers;

    @Autowired
    public PedidoService(List<PedidoHandler> handlers) {
        this.handlers = handlers;
    }

    public boolean processarPedido(Pedido pedido) {
        for (PedidoHandler handler : handlers) {
            if (!handler.processar(pedido)) {
                return false; // Interrompe o processamento se alguma validação falhar
            }
        }
        return true; // Todas as validações foram bem-sucedidas
    }
}

Configuração da Ordem dos Handlers (Opcional)

Se você deseja definir a ordem dos handlers, pode usar a anotação @Order em cada handler ou configurar manualmente a lista na classe PedidoService.

Chamada do Serviço

Agora, ao receber um novo pedido, você apenas precisa chamar o método processarPedido:

    @RestController
    public class PedidoController {

        private final PedidoService pedidoService;

        @Autowired
        public PedidoController(PedidoService pedidoService) {
            this.pedidoService = pedidoService;
        }

        @PostMapping("/processar-pedido")
        public ResponseEntity<String> processarPedido(@RequestBody Pedido pedido) {
            boolean pedidoValido = pedidoService.processarPedido(pedido);
            if (!pedidoValido) {
                return ResponseEntity.status(HttpStatus.BAD_REQUEST).body("Pedido inválido");
            }
            return ResponseEntity.ok("Pedido processado com sucesso");
        }
    }

Benefícios

    Modularidade: Cada validação é encapsulada em uma classe própria, facilitando a manutenção e a adição de novas validações.
    Flexibilidade: Você pode adicionar ou remover handlers facilmente sem alterar a lógica central do serviço.
    Responsabilidade Única: Cada handler é responsável por uma única tarefa, seguindo o princípio de responsabilidade única.

Considerações

Esse padrão é ideal para cenários onde o fluxo de validações pode variar ou quando existe a possibilidade de adicionar ou modificar as etapas de validação sem comprometer o funcionamento do sistema. Essa abordagem baseada no Chain of Responsibility permite um design mais resiliente e pronto para mudanças, algo essencial para demandas e regras de negócio que tendem a evoluir com o tempo em empresas de e-commerce e outras áreas dinâmicas.