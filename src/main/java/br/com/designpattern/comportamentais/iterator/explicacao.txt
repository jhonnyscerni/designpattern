Vamos imaginar um cenário real do mercado de trabalho para um engenheiro de software trabalhando em um sistema de e-commerce. O sistema tem um recurso onde os administradores precisam revisar um grande catálogo de produtos de diferentes fornecedores, que estão armazenados em diferentes fontes de dados, como bancos SQL, APIs externas ou mesmo arquivos CSV.

Cenário
Você foi encarregado de implementar uma funcionalidade em que os administradores possam percorrer e revisar todos os produtos disponíveis, independentemente de onde estejam armazenados. O padrão Iterator é ideal aqui, pois abstrai a complexidade das fontes de dados e oferece uma interface unificada para percorrer os produtos.

Implementação com Spring Boot
Estrutura do Projeto
Product: Classe que representa o produto.
ProductCollection: Interface para coleções de produtos.
ProductIterator: Interface do iterador.
ConcreteProductCollections: Implementações concretas das coleções (ex.: Banco SQL, API externa).
ConcreteProductIterators: Implementações concretas dos iteradores.
Controller: Ponto de entrada para os administradores revisarem os produtos.
Código
Entidade Product
java
Copiar código
public class Product {
    private String id;
    private String name;
    private Double price;

    // Construtores, getters e setters
    public Product(String id, String name, Double price) {
        this.id = id;
        this.name = name;
        this.price = price;
    }
    // Getters e toString
}
Interface ProductIterator
java
Copiar código
public interface ProductIterator {
    boolean hasNext();
    Product next();
}
Interface ProductCollection
java
Copiar código
public interface ProductCollection {
    ProductIterator createIterator();
}
Implementação para Banco de Dados
java
Copiar código
import java.util.List;

public class DatabaseProductCollection implements ProductCollection {
    private List<Product> products;

    public DatabaseProductCollection(List<Product> products) {
        this.products = products;
    }

    @Override
    public ProductIterator createIterator() {
        return new DatabaseProductIterator(products);
    }
}

class DatabaseProductIterator implements ProductIterator {
    private List<Product> products;
    private int position = 0;

    public DatabaseProductIterator(List<Product> products) {
        this.products = products;
    }

    @Override
    public boolean hasNext() {
        return position < products.size();
    }

    @Override
    public Product next() {
        return hasNext() ? products.get(position++) : null;
    }
}
Implementação para API Externa
java
Copiar código
import java.util.Iterator;
import java.util.List;

public class ExternalApiProductCollection implements ProductCollection {
    private List<Product> products;

    public ExternalApiProductCollection(List<Product> products) {
        this.products = products;
    }

    @Override
    public ProductIterator createIterator() {
        return new ExternalApiProductIterator(products.iterator());
    }
}

class ExternalApiProductIterator implements ProductIterator {
    private Iterator<Product> iterator;

    public ExternalApiProductIterator(Iterator<Product> iterator) {
        this.iterator = iterator;
    }

    @Override
    public boolean hasNext() {
        return iterator.hasNext();
    }

    @Override
    public Product next() {
        return iterator.hasNext() ? iterator.next() : null;
    }
}
Controller para Unificar as Coleções
java
Copiar código
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

@RestController
public class ProductController {

    @GetMapping("/products")
    public List<Product> getAllProducts() {
        // Simula produtos de diferentes fontes
        List<Product> databaseProducts = Arrays.asList(
                new Product("1", "Laptop", 2000.0),
                new Product("2", "Mouse", 50.0)
        );

        List<Product> apiProducts = Arrays.asList(
                new Product("3", "Keyboard", 150.0),
                new Product("4", "Monitor", 300.0)
        );

        ProductCollection dbCollection = new DatabaseProductCollection(databaseProducts);
        ProductCollection apiCollection = new ExternalApiProductCollection(apiProducts);

        List<Product> allProducts = new ArrayList<>();

        ProductIterator dbIterator = dbCollection.createIterator();
        while (dbIterator.hasNext()) {
            allProducts.add(dbIterator.next());
        }

        ProductIterator apiIterator = apiCollection.createIterator();
        while (apiIterator.hasNext()) {
            allProducts.add(apiIterator.next());
        }

        return allProducts;
    }
}
Resultado da API Ao acessar o endpoint /products, o administrador recebe uma lista unificada de produtos de diferentes fontes, sem saber como eles estão armazenados.
json
Copiar código
[
    { "id": "1", "name": "Laptop", "price": 2000.0 },
    { "id": "2", "name": "Mouse", "price": 50.0 },
    { "id": "3", "name": "Keyboard", "price": 150.0 },
    { "id": "4", "name": "Monitor", "price": 300.0 }
]
Vantagens
Abstração: Os administradores ou outras partes do sistema não precisam saber a origem dos dados.
Facilidade de Extensão: Novas fontes de dados podem ser adicionadas sem modificar os iteradores existentes.
Reutilização de Código: A lógica de iteração está desacoplada da implementação específica das coleções.
Essa implementação demonstra como o padrão Iterator pode ser útil em um cenário real de mercado, especialmente em um sistema de Spring Boot. e disponibilize o link para download